import com.google.gson.Gson
import com.google.gson.JsonParser

plugins {
    id("org.jetbrains.kotlin.js") version "1.3.61"
}

group = "org.stvad"
version = "0.1.5"
description = "Alfred workflow to convert human date to computer date"

repositories {
    mavenCentral()
}

dependencies {
    implementation(kotlin("stdlib-js"))
}

kotlin {
    sourceSets["main"].dependencies {
        implementation(npm("alfy", "0.9.1"))
        implementation(npm("chrono-node", "1.4.2"))
        implementation(npm("dateformat", "^4"))
    }
    target.useCommonJs()

    target.nodejs {
    }
}

val packageLocation = "build/js/packages/${project.name}"
val copyWorkflowResources by tasks.registering(Copy::class) {
    from("README.md", "workflow_resources", "illustrations")
    into(packageLocation)
}

/**
 * Updates autogenerated package.json to be ready for publishing in NPM
 * Hopefully at some point KotlinJs plugin would have native facilities for this
 */
val updatePackageJson by tasks.creating {
    doLast {
        val targetFile = file("$packageLocation/package.json")
        val packageJson = JsonParser().parse(targetFile.readText()).asJsonObject

        val gson = Gson()

        packageJson.apply {
            // It's not required and is not present in NPM
            get("dependencies").asJsonObject.remove("kotlin-test-js-runner")

            addProperty("description", project.description)

            add(
                "scripts",
                gson.toJsonTree(
                    mapOf(
                        "postinstall" to "alfy-init",
                        "preuninstall" to "alfy-cleanup"
                    )
                )
            )

            add(
                "author",
                gson.toJsonTree(
                    mapOf(
                        "email" to "root@stvad.org",
                        "name" to "Vladyslav Sitalo"
                    )
                )
            )
        }

        targetFile.writeText(gson.toJson(packageJson))
    }
}

tasks.assemble { dependsOn(copyWorkflowResources, updatePackageJson) }
